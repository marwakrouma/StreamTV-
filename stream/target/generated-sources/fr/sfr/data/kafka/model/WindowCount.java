/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fr.sfr.data.kafka.model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WindowCount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4162490007774428178L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WindowCount\",\"namespace\":\"fr.sfr.data.kafka.model\",\"fields\":[{\"name\":\"channel\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"audience\",\"type\":\"long\"},{\"name\":\"windowStart\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"windowEnd\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String channel;
   private long audience;
   private java.lang.String windowStart;
   private java.lang.String windowEnd;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WindowCount() {}

  /**
   * All-args constructor.
   * @param channel The new value for channel
   * @param audience The new value for audience
   * @param windowStart The new value for windowStart
   * @param windowEnd The new value for windowEnd
   */
  public WindowCount(java.lang.String channel, java.lang.Long audience, java.lang.String windowStart, java.lang.String windowEnd) {
    this.channel = channel;
    this.audience = audience;
    this.windowStart = windowStart;
    this.windowEnd = windowEnd;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return channel;
    case 1: return audience;
    case 2: return windowStart;
    case 3: return windowEnd;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: channel = (java.lang.String)value$; break;
    case 1: audience = (java.lang.Long)value$; break;
    case 2: windowStart = (java.lang.String)value$; break;
    case 3: windowEnd = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'channel' field.
   * @return The value of the 'channel' field.
   */
  public java.lang.String getChannel() {
    return channel;
  }

  /**
   * Sets the value of the 'channel' field.
   * @param value the value to set.
   */
  public void setChannel(java.lang.String value) {
    this.channel = value;
  }

  /**
   * Gets the value of the 'audience' field.
   * @return The value of the 'audience' field.
   */
  public java.lang.Long getAudience() {
    return audience;
  }

  /**
   * Sets the value of the 'audience' field.
   * @param value the value to set.
   */
  public void setAudience(java.lang.Long value) {
    this.audience = value;
  }

  /**
   * Gets the value of the 'windowStart' field.
   * @return The value of the 'windowStart' field.
   */
  public java.lang.String getWindowStart() {
    return windowStart;
  }

  /**
   * Sets the value of the 'windowStart' field.
   * @param value the value to set.
   */
  public void setWindowStart(java.lang.String value) {
    this.windowStart = value;
  }

  /**
   * Gets the value of the 'windowEnd' field.
   * @return The value of the 'windowEnd' field.
   */
  public java.lang.String getWindowEnd() {
    return windowEnd;
  }

  /**
   * Sets the value of the 'windowEnd' field.
   * @param value the value to set.
   */
  public void setWindowEnd(java.lang.String value) {
    this.windowEnd = value;
  }

  /**
   * Creates a new WindowCount RecordBuilder.
   * @return A new WindowCount RecordBuilder
   */
  public static fr.sfr.data.kafka.model.WindowCount.Builder newBuilder() {
    return new fr.sfr.data.kafka.model.WindowCount.Builder();
  }

  /**
   * Creates a new WindowCount RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WindowCount RecordBuilder
   */
  public static fr.sfr.data.kafka.model.WindowCount.Builder newBuilder(fr.sfr.data.kafka.model.WindowCount.Builder other) {
    return new fr.sfr.data.kafka.model.WindowCount.Builder(other);
  }

  /**
   * Creates a new WindowCount RecordBuilder by copying an existing WindowCount instance.
   * @param other The existing instance to copy.
   * @return A new WindowCount RecordBuilder
   */
  public static fr.sfr.data.kafka.model.WindowCount.Builder newBuilder(fr.sfr.data.kafka.model.WindowCount other) {
    return new fr.sfr.data.kafka.model.WindowCount.Builder(other);
  }

  /**
   * RecordBuilder for WindowCount instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WindowCount>
    implements org.apache.avro.data.RecordBuilder<WindowCount> {

    private java.lang.String channel;
    private long audience;
    private java.lang.String windowStart;
    private java.lang.String windowEnd;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(fr.sfr.data.kafka.model.WindowCount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.channel)) {
        this.channel = data().deepCopy(fields()[0].schema(), other.channel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.audience)) {
        this.audience = data().deepCopy(fields()[1].schema(), other.audience);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.windowStart)) {
        this.windowStart = data().deepCopy(fields()[2].schema(), other.windowStart);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.windowEnd)) {
        this.windowEnd = data().deepCopy(fields()[3].schema(), other.windowEnd);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WindowCount instance
     * @param other The existing instance to copy.
     */
    private Builder(fr.sfr.data.kafka.model.WindowCount other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.channel)) {
        this.channel = data().deepCopy(fields()[0].schema(), other.channel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.audience)) {
        this.audience = data().deepCopy(fields()[1].schema(), other.audience);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.windowStart)) {
        this.windowStart = data().deepCopy(fields()[2].schema(), other.windowStart);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.windowEnd)) {
        this.windowEnd = data().deepCopy(fields()[3].schema(), other.windowEnd);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'channel' field.
      * @return The value.
      */
    public java.lang.String getChannel() {
      return channel;
    }

    /**
      * Sets the value of the 'channel' field.
      * @param value The value of 'channel'.
      * @return This builder.
      */
    public fr.sfr.data.kafka.model.WindowCount.Builder setChannel(java.lang.String value) {
      validate(fields()[0], value);
      this.channel = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'channel' field has been set.
      * @return True if the 'channel' field has been set, false otherwise.
      */
    public boolean hasChannel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'channel' field.
      * @return This builder.
      */
    public fr.sfr.data.kafka.model.WindowCount.Builder clearChannel() {
      channel = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'audience' field.
      * @return The value.
      */
    public java.lang.Long getAudience() {
      return audience;
    }

    /**
      * Sets the value of the 'audience' field.
      * @param value The value of 'audience'.
      * @return This builder.
      */
    public fr.sfr.data.kafka.model.WindowCount.Builder setAudience(long value) {
      validate(fields()[1], value);
      this.audience = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'audience' field has been set.
      * @return True if the 'audience' field has been set, false otherwise.
      */
    public boolean hasAudience() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'audience' field.
      * @return This builder.
      */
    public fr.sfr.data.kafka.model.WindowCount.Builder clearAudience() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'windowStart' field.
      * @return The value.
      */
    public java.lang.String getWindowStart() {
      return windowStart;
    }

    /**
      * Sets the value of the 'windowStart' field.
      * @param value The value of 'windowStart'.
      * @return This builder.
      */
    public fr.sfr.data.kafka.model.WindowCount.Builder setWindowStart(java.lang.String value) {
      validate(fields()[2], value);
      this.windowStart = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'windowStart' field has been set.
      * @return True if the 'windowStart' field has been set, false otherwise.
      */
    public boolean hasWindowStart() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'windowStart' field.
      * @return This builder.
      */
    public fr.sfr.data.kafka.model.WindowCount.Builder clearWindowStart() {
      windowStart = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'windowEnd' field.
      * @return The value.
      */
    public java.lang.String getWindowEnd() {
      return windowEnd;
    }

    /**
      * Sets the value of the 'windowEnd' field.
      * @param value The value of 'windowEnd'.
      * @return This builder.
      */
    public fr.sfr.data.kafka.model.WindowCount.Builder setWindowEnd(java.lang.String value) {
      validate(fields()[3], value);
      this.windowEnd = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'windowEnd' field has been set.
      * @return True if the 'windowEnd' field has been set, false otherwise.
      */
    public boolean hasWindowEnd() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'windowEnd' field.
      * @return This builder.
      */
    public fr.sfr.data.kafka.model.WindowCount.Builder clearWindowEnd() {
      windowEnd = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public WindowCount build() {
      try {
        WindowCount record = new WindowCount();
        record.channel = fieldSetFlags()[0] ? this.channel : (java.lang.String) defaultValue(fields()[0]);
        record.audience = fieldSetFlags()[1] ? this.audience : (java.lang.Long) defaultValue(fields()[1]);
        record.windowStart = fieldSetFlags()[2] ? this.windowStart : (java.lang.String) defaultValue(fields()[2]);
        record.windowEnd = fieldSetFlags()[3] ? this.windowEnd : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
